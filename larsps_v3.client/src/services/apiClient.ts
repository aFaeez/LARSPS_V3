//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class Client {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @return OK
     */
    getProject(body: GetProjectRequest): Promise<GetProjectResponse[]> {
        let url_ = this.baseUrl + "/GetProject";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetProject(_response);
        });
    }

    protected processGetProject(response: Response): Promise<GetProjectResponse[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(GetProjectResponse.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            return throwException("Bad Request", status, _responseText, _headers);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetProjectResponse[]>(null as any);
    }

    /**
     * @return OK
     */
    getProjectStatus(): Promise<void> {
        let url_ = this.baseUrl + "/GetProjectStatus";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetProjectStatus(_response);
        });
    }

    protected processGetProjectStatus(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    loginLAR(body: { [key: string]: JsonNode; }): Promise<void> {
        let url_ = this.baseUrl + "/LoginLAR";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLoginLAR(_response);
        });
    }

    protected processLoginLAR(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    getBG(body: GetBGRequest): Promise<void> {
        let url_ = this.baseUrl + "/GetBG";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetBG(_response);
        });
    }

    protected processGetBG(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    getBGSub(body: GetBGSubRequest): Promise<void> {
        let url_ = this.baseUrl + "/GetBGSub";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetBGSub(_response);
        });
    }

    protected processGetBGSub(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    submitBG(body: SubmitBGRequest): Promise<void> {
        let url_ = this.baseUrl + "/SubmitBG";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSubmitBG(_response);
        });
    }

    protected processSubmitBG(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    activator(body: ActivatorRequest): Promise<void> {
        let url_ = this.baseUrl + "/Activator";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processActivator(_response);
        });
    }

    protected processActivator(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    getAPB(body: GetAPBRequest): Promise<void> {
        let url_ = this.baseUrl + "/GetAPB";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAPB(_response);
        });
    }

    protected processGetAPB(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    submitAPB(body: SubmitAPBRequest): Promise<void> {
        let url_ = this.baseUrl + "/SubmitAPB";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSubmitAPB(_response);
        });
    }

    protected processSubmitAPB(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    getFile(body: GetFileRequestDto): Promise<void> {
        let url_ = this.baseUrl + "/GetFile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetFile(_response);
        });
    }

    protected processGetFile(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    getUser(body: GetUserRequest): Promise<GetUserResponse[]> {
        let url_ = this.baseUrl + "/GetUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetUser(_response);
        });
    }

    protected processGetUser(response: Response): Promise<GetUserResponse[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(GetUserResponse.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            return throwException("Bad Request", status, _responseText, _headers);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetUserResponse[]>(null as any);
    }

    /**
     * @return OK
     */
    getMenuParent(body: GetMenuParentRequest): Promise<GetMenuParentResponse[]> {
        let url_ = this.baseUrl + "/GetMenuParent";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetMenuParent(_response);
        });
    }

    protected processGetMenuParent(response: Response): Promise<GetMenuParentResponse[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(GetMenuParentResponse.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            return throwException("Bad Request", status, _responseText, _headers);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetMenuParentResponse[]>(null as any);
    }

    /**
     * @return OK
     */
    getMenuChild(body: GetMenuChildRequest): Promise<GetMenuChildResponse[]> {
        let url_ = this.baseUrl + "/GetMenuChild";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetMenuChild(_response);
        });
    }

    protected processGetMenuChild(response: Response): Promise<GetMenuChildResponse[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(GetMenuChildResponse.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            return throwException("Bad Request", status, _responseText, _headers);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("Internal Server Error", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetMenuChildResponse[]>(null as any);
    }

    /**
     * @return OK
     */
    settings(): Promise<void> {
        let url_ = this.baseUrl + "/api/settings";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSettings(_response);
        });
    }

    protected processSettings(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class LARDashboardClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @return OK
     */
    1(body: { [key: string]: JsonNode; }): Promise<void> {
        let url_ = this.baseUrl + "/LARDashboard_1";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.process1(_response);
        });
    }

    protected process1(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    2(body: { [key: string]: JsonNode; }): Promise<void> {
        let url_ = this.baseUrl + "/LARDashboard_2";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.process2(_response);
        });
    }

    protected process2(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    3(body: { [key: string]: JsonNode; }): Promise<void> {
        let url_ = this.baseUrl + "/LARDashboard_3";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.process3(_response);
        });
    }

    protected process3(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class BGDashboardClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @return OK
     */
    totLA(body: { [key: string]: JsonNode; }): Promise<void> {
        let url_ = this.baseUrl + "/BGDashboard_TotLA";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processTotLA(_response);
        });
    }

    protected processTotLA(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    approved(body: { [key: string]: JsonNode; }): Promise<void> {
        let url_ = this.baseUrl + "/BGDashboard_Approved";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processApproved(_response);
        });
    }

    protected processApproved(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    pending(body: { [key: string]: JsonNode; }): Promise<void> {
        let url_ = this.baseUrl + "/BGDashboard_Pending";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPending(_response);
        });
    }

    protected processPending(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class ActivatorRequest implements IActivatorRequest {
    appStatStr?: string | undefined;
    userIdStr?: string | undefined;
    ipAddrStr?: string | undefined;
    dateCurrStr?: string | undefined;
    typeStr?: string | undefined;
    compIDStr?: string | undefined;
    laNoStr?: string | undefined;

    constructor(data?: IActivatorRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.appStatStr = _data["appStatStr"];
            this.userIdStr = _data["userIdStr"];
            this.ipAddrStr = _data["ipAddrStr"];
            this.dateCurrStr = _data["dateCurrStr"];
            this.typeStr = _data["typeStr"];
            this.compIDStr = _data["compIDStr"];
            this.laNoStr = _data["laNoStr"];
        }
    }

    static fromJS(data: any): ActivatorRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ActivatorRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["appStatStr"] = this.appStatStr;
        data["userIdStr"] = this.userIdStr;
        data["ipAddrStr"] = this.ipAddrStr;
        data["dateCurrStr"] = this.dateCurrStr;
        data["typeStr"] = this.typeStr;
        data["compIDStr"] = this.compIDStr;
        data["laNoStr"] = this.laNoStr;
        return data;
    }
}

export interface IActivatorRequest {
    appStatStr?: string | undefined;
    userIdStr?: string | undefined;
    ipAddrStr?: string | undefined;
    dateCurrStr?: string | undefined;
    typeStr?: string | undefined;
    compIDStr?: string | undefined;
    laNoStr?: string | undefined;
}

export class GetAPBRequest implements IGetAPBRequest {
    compIdStr?: string | undefined;
    projectStr?: string | undefined;
    strLaNo?: string | undefined;

    constructor(data?: IGetAPBRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.compIdStr = _data["compIdStr"];
            this.projectStr = _data["projectStr"];
            this.strLaNo = _data["strLaNo"];
        }
    }

    static fromJS(data: any): GetAPBRequest {
        data = typeof data === 'object' ? data : {};
        let result = new GetAPBRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["compIdStr"] = this.compIdStr;
        data["projectStr"] = this.projectStr;
        data["strLaNo"] = this.strLaNo;
        return data;
    }
}

export interface IGetAPBRequest {
    compIdStr?: string | undefined;
    projectStr?: string | undefined;
    strLaNo?: string | undefined;
}

export class GetBGRequest implements IGetBGRequest {
    compIdStr?: string | undefined;
    projectStr?: string | undefined;

    constructor(data?: IGetBGRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.compIdStr = _data["compIdStr"];
            this.projectStr = _data["projectStr"];
        }
    }

    static fromJS(data: any): GetBGRequest {
        data = typeof data === 'object' ? data : {};
        let result = new GetBGRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["compIdStr"] = this.compIdStr;
        data["projectStr"] = this.projectStr;
        return data;
    }
}

export interface IGetBGRequest {
    compIdStr?: string | undefined;
    projectStr?: string | undefined;
}

export class GetBGSubRequest implements IGetBGSubRequest {
    strLaNo?: string | undefined;

    constructor(data?: IGetBGSubRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.strLaNo = _data["strLaNo"];
        }
    }

    static fromJS(data: any): GetBGSubRequest {
        data = typeof data === 'object' ? data : {};
        let result = new GetBGSubRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["strLaNo"] = this.strLaNo;
        return data;
    }
}

export interface IGetBGSubRequest {
    strLaNo?: string | undefined;
}

export class GetFileRequestDto implements IGetFileRequestDto {
    laNoStr?: string | undefined;
    projectStr?: string | undefined;

    constructor(data?: IGetFileRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.laNoStr = _data["laNoStr"];
            this.projectStr = _data["projectStr"];
        }
    }

    static fromJS(data: any): GetFileRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetFileRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["laNoStr"] = this.laNoStr;
        data["projectStr"] = this.projectStr;
        return data;
    }
}

export interface IGetFileRequestDto {
    laNoStr?: string | undefined;
    projectStr?: string | undefined;
}

export class GetMenuChildRequest implements IGetMenuChildRequest {
    queryType?: string | undefined;
    menuSystemName?: string | undefined;
    userID?: string | undefined;
    isITAdmin?: number;
    menuParentID?: string | undefined;

    constructor(data?: IGetMenuChildRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.queryType = _data["queryType"];
            this.menuSystemName = _data["menuSystemName"];
            this.userID = _data["userID"];
            this.isITAdmin = _data["isITAdmin"];
            this.menuParentID = _data["menuParentID"];
        }
    }

    static fromJS(data: any): GetMenuChildRequest {
        data = typeof data === 'object' ? data : {};
        let result = new GetMenuChildRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["queryType"] = this.queryType;
        data["menuSystemName"] = this.menuSystemName;
        data["userID"] = this.userID;
        data["isITAdmin"] = this.isITAdmin;
        data["menuParentID"] = this.menuParentID;
        return data;
    }
}

export interface IGetMenuChildRequest {
    queryType?: string | undefined;
    menuSystemName?: string | undefined;
    userID?: string | undefined;
    isITAdmin?: number;
    menuParentID?: string | undefined;
}

export class GetMenuChildResponse implements IGetMenuChildResponse {
    menuId?: number;
    menuName?: string | undefined;
    menuParentId?: number;
    menuURL?: string | undefined;
    menuOrder?: number;

    constructor(data?: IGetMenuChildResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.menuId = _data["menuId"];
            this.menuName = _data["menuName"];
            this.menuParentId = _data["menuParentId"];
            this.menuURL = _data["menuURL"];
            this.menuOrder = _data["menuOrder"];
        }
    }

    static fromJS(data: any): GetMenuChildResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetMenuChildResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["menuId"] = this.menuId;
        data["menuName"] = this.menuName;
        data["menuParentId"] = this.menuParentId;
        data["menuURL"] = this.menuURL;
        data["menuOrder"] = this.menuOrder;
        return data;
    }
}

export interface IGetMenuChildResponse {
    menuId?: number;
    menuName?: string | undefined;
    menuParentId?: number;
    menuURL?: string | undefined;
    menuOrder?: number;
}

export class GetMenuParentRequest implements IGetMenuParentRequest {
    queryType?: string | undefined;
    menuSystemName?: string | undefined;
    userID?: string | undefined;
    isITAdmin?: number;
    menuSubSystemName?: string | undefined;

    constructor(data?: IGetMenuParentRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.queryType = _data["queryType"];
            this.menuSystemName = _data["menuSystemName"];
            this.userID = _data["userID"];
            this.isITAdmin = _data["isITAdmin"];
            this.menuSubSystemName = _data["menuSubSystemName"];
        }
    }

    static fromJS(data: any): GetMenuParentRequest {
        data = typeof data === 'object' ? data : {};
        let result = new GetMenuParentRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["queryType"] = this.queryType;
        data["menuSystemName"] = this.menuSystemName;
        data["userID"] = this.userID;
        data["isITAdmin"] = this.isITAdmin;
        data["menuSubSystemName"] = this.menuSubSystemName;
        return data;
    }
}

export interface IGetMenuParentRequest {
    queryType?: string | undefined;
    menuSystemName?: string | undefined;
    userID?: string | undefined;
    isITAdmin?: number;
    menuSubSystemName?: string | undefined;
}

export class GetMenuParentResponse implements IGetMenuParentResponse {
    menuId?: number;
    menuName?: string | undefined;
    menuParentId?: number;
    menuURL?: string | undefined;
    menuOrder?: number;

    constructor(data?: IGetMenuParentResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.menuId = _data["menuId"];
            this.menuName = _data["menuName"];
            this.menuParentId = _data["menuParentId"];
            this.menuURL = _data["menuURL"];
            this.menuOrder = _data["menuOrder"];
        }
    }

    static fromJS(data: any): GetMenuParentResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetMenuParentResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["menuId"] = this.menuId;
        data["menuName"] = this.menuName;
        data["menuParentId"] = this.menuParentId;
        data["menuURL"] = this.menuURL;
        data["menuOrder"] = this.menuOrder;
        return data;
    }
}

export interface IGetMenuParentResponse {
    menuId?: number;
    menuName?: string | undefined;
    menuParentId?: number;
    menuURL?: string | undefined;
    menuOrder?: number;
}

export class GetProjectRequest implements IGetProjectRequest {
    userID?: string | undefined;
    projStatus?: number;

    constructor(data?: IGetProjectRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userID = _data["userID"];
            this.projStatus = _data["projStatus"];
        }
    }

    static fromJS(data: any): GetProjectRequest {
        data = typeof data === 'object' ? data : {};
        let result = new GetProjectRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userID"] = this.userID;
        data["projStatus"] = this.projStatus;
        return data;
    }
}

export interface IGetProjectRequest {
    userID?: string | undefined;
    projStatus?: number;
}

export class GetProjectResponse implements IGetProjectResponse {
    proProjectId?: string | undefined;
    proProjectDesc?: string | undefined;
    proProjectType?: string | undefined;
    projWithFS?: number;

    constructor(data?: IGetProjectResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.proProjectId = _data["proProjectId"];
            this.proProjectDesc = _data["proProjectDesc"];
            this.proProjectType = _data["proProjectType"];
            this.projWithFS = _data["projWithFS"];
        }
    }

    static fromJS(data: any): GetProjectResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetProjectResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["proProjectId"] = this.proProjectId;
        data["proProjectDesc"] = this.proProjectDesc;
        data["proProjectType"] = this.proProjectType;
        data["projWithFS"] = this.projWithFS;
        return data;
    }
}

export interface IGetProjectResponse {
    proProjectId?: string | undefined;
    proProjectDesc?: string | undefined;
    proProjectType?: string | undefined;
    projWithFS?: number;
}

export class GetUserRequest implements IGetUserRequest {
    queryType?: string | undefined;
    userID?: string | undefined;
    menuSystemName?: string | undefined;

    constructor(data?: IGetUserRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.queryType = _data["queryType"];
            this.userID = _data["userID"];
            this.menuSystemName = _data["menuSystemName"];
        }
    }

    static fromJS(data: any): GetUserRequest {
        data = typeof data === 'object' ? data : {};
        let result = new GetUserRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["queryType"] = this.queryType;
        data["userID"] = this.userID;
        data["menuSystemName"] = this.menuSystemName;
        return data;
    }
}

export interface IGetUserRequest {
    queryType?: string | undefined;
    userID?: string | undefined;
    menuSystemName?: string | undefined;
}

export class GetUserResponse implements IGetUserResponse {
    userId?: string | undefined;
    accessStartDate?: Date;
    accessEndDate?: Date;
    isActive?: number;
    msName?: string | undefined;
    msEmail?: string | undefined;
    msdDepartment?: string | undefined;
    msdPostingLocation?: string | undefined;
    msdPostingCode?: string | undefined;
    msdDesignation?: string | undefined;
    msIsActive?: number;
    roleName?: string | undefined;

    constructor(data?: IGetUserResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.accessStartDate = _data["accessStartDate"] ? new Date(_data["accessStartDate"].toString()) : <any>undefined;
            this.accessEndDate = _data["accessEndDate"] ? new Date(_data["accessEndDate"].toString()) : <any>undefined;
            this.isActive = _data["isActive"];
            this.msName = _data["msName"];
            this.msEmail = _data["msEmail"];
            this.msdDepartment = _data["msdDepartment"];
            this.msdPostingLocation = _data["msdPostingLocation"];
            this.msdPostingCode = _data["msdPostingCode"];
            this.msdDesignation = _data["msdDesignation"];
            this.msIsActive = _data["msIsActive"];
            this.roleName = _data["roleName"];
        }
    }

    static fromJS(data: any): GetUserResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetUserResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["accessStartDate"] = this.accessStartDate ? this.accessStartDate.toISOString() : <any>undefined;
        data["accessEndDate"] = this.accessEndDate ? this.accessEndDate.toISOString() : <any>undefined;
        data["isActive"] = this.isActive;
        data["msName"] = this.msName;
        data["msEmail"] = this.msEmail;
        data["msdDepartment"] = this.msdDepartment;
        data["msdPostingLocation"] = this.msdPostingLocation;
        data["msdPostingCode"] = this.msdPostingCode;
        data["msdDesignation"] = this.msdDesignation;
        data["msIsActive"] = this.msIsActive;
        data["roleName"] = this.roleName;
        return data;
    }
}

export interface IGetUserResponse {
    userId?: string | undefined;
    accessStartDate?: Date;
    accessEndDate?: Date;
    isActive?: number;
    msName?: string | undefined;
    msEmail?: string | undefined;
    msdDepartment?: string | undefined;
    msdPostingLocation?: string | undefined;
    msdPostingCode?: string | undefined;
    msdDesignation?: string | undefined;
    msIsActive?: number;
    roleName?: string | undefined;
}

export class JsonNode implements IJsonNode {
    options?: JsonNodeOptions;
    parent?: JsonNode;
    root?: JsonNode;

    constructor(data?: IJsonNode) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.options = _data["options"] ? JsonNodeOptions.fromJS(_data["options"]) : <any>undefined;
            this.parent = _data["parent"] ? JsonNode.fromJS(_data["parent"]) : <any>undefined;
            this.root = _data["root"] ? JsonNode.fromJS(_data["root"]) : <any>undefined;
        }
    }

    static fromJS(data: any): JsonNode {
        data = typeof data === 'object' ? data : {};
        let result = new JsonNode();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["options"] = this.options ? this.options.toJSON() : <any>undefined;
        data["parent"] = this.parent ? this.parent.toJSON() : <any>undefined;
        data["root"] = this.root ? this.root.toJSON() : <any>undefined;
        return data;
    }
}

export interface IJsonNode {
    options?: JsonNodeOptions;
    parent?: JsonNode;
    root?: JsonNode;
}

export class JsonNodeOptions implements IJsonNodeOptions {
    propertyNameCaseInsensitive?: boolean;

    constructor(data?: IJsonNodeOptions) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.propertyNameCaseInsensitive = _data["propertyNameCaseInsensitive"];
        }
    }

    static fromJS(data: any): JsonNodeOptions {
        data = typeof data === 'object' ? data : {};
        let result = new JsonNodeOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["propertyNameCaseInsensitive"] = this.propertyNameCaseInsensitive;
        return data;
    }
}

export interface IJsonNodeOptions {
    propertyNameCaseInsensitive?: boolean;
}

export class SubmitAPBRequest implements ISubmitAPBRequest {
    strSQL?: string | undefined;
    apbDate?: Date;
    apbExpiryDate?: Date;

    constructor(data?: ISubmitAPBRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.strSQL = _data["strSQL"];
            this.apbDate = _data["apbDate"] ? new Date(_data["apbDate"].toString()) : <any>undefined;
            this.apbExpiryDate = _data["apbExpiryDate"] ? new Date(_data["apbExpiryDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): SubmitAPBRequest {
        data = typeof data === 'object' ? data : {};
        let result = new SubmitAPBRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["strSQL"] = this.strSQL;
        data["apbDate"] = this.apbDate ? this.apbDate.toISOString() : <any>undefined;
        data["apbExpiryDate"] = this.apbExpiryDate ? this.apbExpiryDate.toISOString() : <any>undefined;
        return data;
    }
}

export interface ISubmitAPBRequest {
    strSQL?: string | undefined;
    apbDate?: Date;
    apbExpiryDate?: Date;
}

export class SubmitBGRequest implements ISubmitBGRequest {
    strSQL?: string | undefined;
    bgDate?: Date;
    bgExpiryDate?: Date;

    constructor(data?: ISubmitBGRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.strSQL = _data["strSQL"];
            this.bgDate = _data["bgDate"] ? new Date(_data["bgDate"].toString()) : <any>undefined;
            this.bgExpiryDate = _data["bgExpiryDate"] ? new Date(_data["bgExpiryDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): SubmitBGRequest {
        data = typeof data === 'object' ? data : {};
        let result = new SubmitBGRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["strSQL"] = this.strSQL;
        data["bgDate"] = this.bgDate ? this.bgDate.toISOString() : <any>undefined;
        data["bgExpiryDate"] = this.bgExpiryDate ? this.bgExpiryDate.toISOString() : <any>undefined;
        return data;
    }
}

export interface ISubmitBGRequest {
    strSQL?: string | undefined;
    bgDate?: Date;
    bgExpiryDate?: Date;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}